# c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t
# vi: set shiftwidth=4 tabstop=4 noexpandtab:
# :indentSize=4:tabSize=4:noTabs=false:

[alias]

	authors-current = !git ls-files | xargs -n1 git blame --line-porcelain	| sed -n -e 's/^author //p' | sort | uniq -c | sort -rn
	authors = shortlog -sne

	br = branch

	changed = whatchanged --stat
	ci = commit -vv
	co = checkout

	df = diff
	dfs = ! git diff | grep -v -e ^--- -e ^@@ -e ^+++ -e ^index

	genesis = commit --allow-empty -m Genesis

	ff = merge --ff-only
	find-deleted-commit = ! git fsck --no-reflog | awk '/dangling commit/ {print $3}' 2>/dev/null
	# http://vstone.eu/github-pull-requests-as-seen-by-git/
	fpr = !sh -c \"git fetch ${2:-origin} pull/${1}/head:PR/${2:-origin}/${1}\" -

	igd = ls-files --others -i --exclude-standard
	# http://stackoverflow.com/questions/2363197/can-i-get-a-list-of-files-marked-assume-unchanged
	ignored = !git ls-files -v | grep "^[[:lower:]]"
	ignore = update-index assume-unchanged
	unignore = update-index --no-assume-unchanged

	# http://tschuermans.be/2016/03/git-compare-log-develop/
	# A small git alias which can be used to list all commits which are
	# different to the master (or an optionally named) branch.
	logcompare = "!f() { git log --oneline --decorate ${1:-master}..$(git rev-parse --abbrev-ref HEAD); }; f"

	lol =  log --graph --decorate --abbrev-commit		--pretty=custom --date=short
	lola = log --graph --decorate --abbrev-commit --all --pretty=custom --date=short
	lold = log --graph --decorate --abbrev-commit --all --pretty=custom
	ls = ls-files
	ls-untracked = ls-files --others

	myinfo = ! echo && git remote -v && echo && git branch --color=always --all -vv && echo && git st && echo && git log --decorate --abbrev-commit --pretty=custom --date=relative -n 3 && echo

	# Prune deletes any local branch which has been deleted from the remote.
	prune = fetch --prune

	pushall = "!git remote -v | grep push | grep -v http | awk '{print $1}' | xargs -L1 -I@ bash -xc 'git push --all @ ; git push --tags @'"
	#pushall = "!git remote -v | grep push | grep -v http | awk '{print $1}' | xargs -L1 -I@ bash -xc 'git push --mirror @'"  # does too much

	rm-deleted = ! git rm $(git ls-files --deleted)
	rm-untracked = ! rm -v $(git ls-files --others)

	# Print absolute path of repo root directory
	root = rev-parse --show-toplevel

	show-upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
	st = status --short --branch --verbose --show-stash

	stash-all = stash save --include-untracked

	# squash last 2 commits, keep oldest commit message
	squash2 = !"GIT_EDITOR=\"sed -i '2s/pick/squash/;/# This is the 2nd commit message:/,$ {d}'\" git rebase -i HEAD~2"
	# squeeze new stuff into latest commit
	squish	= !"git status && git commit	--amend -C HEAD --date=\"`date`\""
	squisha = !"git status && git commit -a --amend -C HEAD --date=\"`date`\""

	tags = "!git for-each-ref --sort=taggerdate --format '%(tag)%09%(taggerdate:raw)%09%(*authorname)%09' refs/tags | awk '{print $1\"\t\t\"strftime(\"%F  %H:%M\", $2)\"\t\"$4\" \"$5\"  \t\t\"$6\" \"$7\" \"$8\" \"$9\" \"$10}' | column -t"
	tree = log --all --graph --decorate --oneline --simplify-by-decoration

	up = remote update

	wip = commit -a -m WIP


[apply]

	whitespace = fix


[branch]

	autosetupmerge = true
	autosetuprebase = always


[color]

	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = true


[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green


[color "diff"]

	context = white
	meta = blue black bold reverse
	frag = magenta bold
	commit =  yellow bold
	old = red bold
	new = green bold
	oldMoved = 8
	newMoved = 14
	oldMovedAlternative = 8 # grey
	newMovedAlternative = 14
	whitespace = white black reverse


[color "status"]

	added = yellow
	changed = green
	untracked = cyan


[commit]

	#gpgsign = true


[core]

	autocrlf = false
	editor = vim
	excludesFile = ~/.gitignore
	whitespace = trailing-space,space-before-tab
	quotepath = false


[diff]

	tool = icdiff
	renames = copy
	noprefix = true


[difftool]

	prompt = false


[difftool "icdiff"]

	cmd = icdiff --line-numbers $LOCAL $REMOTE


[fetch]

	prune = false
	# https://groups.google.com/forum/m/#!msg/binary-transparency/f-BI4o8HZW0/MDmnWideAgAJ
	fsckobjects = false


[github]

	user = srgvg


[gitreview]

	username = svg


[gpg]

	#program = gpg


[merge]

	conflictstyle = diff3


[pretty]

	onefullline = %C(yellow)%h%C(reset) %C(green)%ar%C(reset) %C(bold blue)%an%C(reset) %C(red)%d%C(reset) %s
	custom = %C(bold blue)%h%C(reset) %C(bold green)%ad%C(reset) %C(dim white)%an%C(reset) %C(white)%s%C(reset) %C(bold yellow)%d%C(reset)


[push]

	# git push will by default push all branches that have the same name on the remote
	# to limit this behavior to just the current branch, set this configuration option:
	default = tracking
	#default = matching

	# Instead of manually pushing new tags with --follow-tags, you always send
	# your local tags up along with a git push.
	followTags = true


[receive]

	# https://groups.google.com/forum/m/#!msg/binary-transparency/f-BI4o8HZW0/MDmnWideAgAJ
	fsckobjects = true


#[sendemail]
#
#	smtpserver = smtp.gmail.com
#	smtpserverport = 587
#	smtpencryption = tls
#	smtpuser = serge@vanginderachter.be
#	verify = off


[status]

	relativePaths = true
	showUntrackedFiles = all
	submodulesummary = true
	showStash = true


[svn]

	# push empty directory removals back to svn as directory deletes
	rmdir = true


[transfer]

	# https://groups.google.com/forum/m/#!msg/binary-transparency/f-BI4o8HZW0/MDmnWideAgAJ
	fsckobjects = true


[user]

	name = Serge van Ginderachter
    email = serge@vanginderachter.be
    signingkey = D08FC082B8E46E8E


[rebase]

	autoStash = True


## includes

[include]

	path = ~/.gitconfig.d/git-repo


[includeIf "gitdir:~/src/massivemedia/"]

	path = ~/.gitconfig.d/massivemedia


