# c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t
# vi: set shiftwidth=4 tabstop=4 noexpandtab:
# :indentSize=4:tabSize=4:noTabs=false:
#
# resources
# - https://github.com/henrebotha/dotfiles/blob/main/git/dot-gitconfig

[alias]

	# Display all aliases :)
	aliases = ! git config --list | awk '/alias/{ print $1 }' | perl -pe 's/alias\\.//g' | perl -pe 's/=.+//g'

	ap = -c color.diff=true add --patch

	authors-current = !git ls-files | xargs -n1 git blame --line-porcelain	| sed -n -e 's/^author //p' | sort | uniq -c | sort -rn
	authors = shortlog -sne

	br = branch

	car = commit --amend --no-edit
	changed = whatchanged --stat
	ci = commit -vv
	checkout = checkout --no-guess
	co = checkout --no-guess

	dc = diff --word-diff-regex=.
	dca = diff --cached
	dcac = diff --cached --word-diff-regex=.
	dcaw = diff --cached --word-diff
	df = diff
	# full context
	dfc = diff --no-prefix -U1000
	dfs = ! git diff | grep -v -e ^--- -e ^@@ -e ^+++ -e ^index
	dw = diff --word-diff

	edit=commit --amend --only
	genesis = commit --allow-empty -m Genesis

	fa = fetch --all --prune
	ff = merge --ff-only
	find-deleted-commit = ! git fsck --no-reflog | awk '/dangling commit/ {print $3}' 2>/dev/null
	fp = fetch --prune
	# http://vstone.eu/github-pull-requests-as-seen-by-git/
	fpr = !sh -c \"git fetch ${2:-origin} pull/${1}/head:PR/${2:-origin}/${1}\" -

	hidden = ! git ls-files -v . | grep ^S | awk '{ print $2 }'
	hide = update-index --skip-worktree
	unhide = update-index --no-skip-worktree
	unhide-all = ! cd $(git rev-parse --show-toplevel || echo ".") && git hidden | xargs git unhide

	igd = ls-files --others -i --exclude-standard
	# http://stackoverflow.com/questions/2363197/can-i-get-a-list-of-files-marked-assume-unchanged
	ignored = !git ls-files -v | grep "^[[:lower:]]"
	ignore = update-index assume-unchanged
	unignore = update-index --no-assume-unchanged

	# https://ses4j.github.io/2020/04/01/git-alias-recent-branches/
	lb = !git reflog show --pretty=format:'%gs ~ %gd' --date=relative | grep 'checkout:' | grep -oE '[^ ]+ ~ .*' | awk -F~ '!seen[$1]++' | head -n 10 | awk -F' ~ HEAD@{' '{printf(\"  \\033[33m%s: \\033[37m %s\\033[0m\\n\", substr($2, 1, length($2)-1), $1)}'

	# http://tschuermans.be/2016/03/git-compare-log-develop/
	# A small git alias which can be used to list all commits which are
	# different to the master (or an optionally named) branch.
	logcompare = "!f() { git log --oneline --decorate ${1:-master}..$(git rev-parse --abbrev-ref HEAD); }; f"

	l = -c color.diff=true log
	lg = -c color.diff=true log --oneline --decorate --graph
	lga = -c color.diff=true log --oneline --decorate --graph --all
	lgb = -c color.diff=true log --oneline --decorate --graph --branches
	lo = -c color.diff=true log --oneline --decorate

	lol =  log --graph --decorate --abbrev-commit		--pretty=custom --date=short
	lola = log --graph --decorate --abbrev-commit --all --pretty=custom --date=short
	lold = log --graph --decorate --abbrev-commit --all --pretty=custom
	lolt = log --graph --decorate --abbrev-commit --all --pretty=custom --simplify-by-decoration
	ls = ls-files
	ls-untracked = ls-files --others

	#myinfo = ! echo && git remote -v && echo && git --no-pager branch --color=always --all --list -vv && echo && git st && echo && git log --decorate --abbrev-commit --pretty=custom --date=relative -n 3 && echo
	myinfo = ! echo && git remote -v && echo && git --no-pager branch --list --color=auto --all --column=always && echo && git st && echo && git log --decorate --abbrev-commit --pretty=custom --date=relative -n 3 && echo

	# https://twitter.com/DotProto/status/991112367323824128
	orphan = ! git log --pretty=oneline --abbrev-commit --graph --decorate `git reflog | cut -d \" \" -f 1`

	# Safer alternative to --force
	please = push --force-with-lease
	pf = push --force-with-lease

	# Prune deletes any local branch which has been deleted from the remote.
	prune = fetch --prune

	pushall = "!git remote -v | grep push | grep -v http | awk '{print $1}' | xargs -I@ bash -xc 'git push --all @ ; git push --tags @'"

	rm-deleted = ! git rm $(git ls-files --deleted)
	rm-untracked = ! rm -v $(git ls-files --others)

	# Print absolute path of repo root directory
	root = rev-parse --show-toplevel

	sdc = show --word-diff-regex=.
	sdw = show --word-diff

	show-upstream = rev-parse --abbrev-ref --symbolic-full-name @{u}
	st = status --short --branch --verbose --show-stash

	stash-all = stash save --include-untracked

	# squash last 2 commits, keep oldest commit message
	squash2 = !"GIT_EDITOR=\"sed -i '2s/pick/squash/;/# This is the 2nd commit message:/,$ {d}'\" git rebase -i HEAD~2"
	# squeeze new stuff into latest commit
	squish	= !"git status && git commit	--amend -C HEAD --date=\"`date`\""
	squisha = !"git status && git commit -a --amend -C HEAD --date=\"`date`\""

	tags = "!git for-each-ref --sort=taggerdate --format '%(tag)%09%(taggerdate:raw)%09%(*authorname)%09' refs/tags | awk '{print $1\"\t\t\"strftime(\"%F  %H:%M\", $2)\"\t\"$4\" \"$5\"  \t\t\"$6\" \"$7\" \"$8\" \"$9\" \"$10}' | column -t"
	tree = log --all --graph --oneline --simplify-by-decoration --decorate-refs-exclude='refs/tags'
	treet = log --all --graph --decorate --oneline --simplify-by-decoration

	up = remote update --prune

	wip = commit -a -m WIP


[apply]

	whitespace = fix


[branch]

	autosetupmerge = true
	autosetuprebase = always
	sort = -committerdate


[color]

	branch = auto
	diff = auto
	interactive = auto
	status = auto
	ui = true


[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green


[color "diff"]

	context = white
	meta = blue black bold reverse
	frag = magenta bold
	commit =  yellow bold
	old = red bold
	new = green bold
	oldMoved = 8
	newMoved = 14
	oldMovedAlternative = 8 # grey
	newMovedAlternative = 14
	whitespace = white black reverse


[color "diff-highlight"]
    oldNormal = red bold
    oldHighlight = red bold 52
    newNormal = green bold
    newHighlight = green bold 22


[color "status"]

	added = yellow
	changed = green
	untracked = cyan


[commit]

	gpgsign = true
	verbose = true


[core]

	autocrlf = false
	editor = vim
	excludesFile = ~/.gitignore
	ignorecase = false
	whitespace = trailing-space,space-before-tab
	quotepath = false
	#pager = diff-so-fancy | less --tabs=4 -RFX
	# https://veronneau.org/a-better-git-diff.html
	#pager = diff-highlight | less --tabs=4 -RFX
	# -X:           don't talk to X11 on startup
	# -R:           read only mode
	# -n:           don't use a swap file
	# -c:           run command on start, after autocmd/modeline
	#pager = ifne vim -X -R - -n -c 'set filetype=git nowrap noro'
	sparseCheckoutCone = 1


[diff]

	colorMoved = plain
	colorMovedWS = allow-indentation-change
	compactionheuristic = true
	fallbackToNoIndex = true
	mnemonicPrefix = true
	noprefix = true
	renames = true
	tool = difftastic
	algorithm = histogram


[difftool]

	prompt = false


[difftool "difftastic"]

	cmd = difft "$LOCAL" "$REMOTE"


#[difftool "icdiff"]
#
#	cmd = icdiff --line-numbers $LOCAL $REMOTE


[diff-so-fancy]
	first-run = false
	changeHunkIndicators = false


[grep]
	lineNumber = true
	extendedRegexp = true
	fallbackToNoIndex = true


[fetch]

	prune = true
	# https://groups.google.com/forum/m/#!msg/binary-transparency/f-BI4o8HZW0/MDmnWideAgAJ
	fsckobjects = false
	pruneTags = true
	all = true


[format]

	signOff = true


[github]

	user = srgvg


[gitreview]

	username = svg


[gpg]

	program = gpg


[init]
	templateDir = /home/serge/.git-template
	defaultBranch = main

	#defaultBranch = main


[merge]

	conflictstyle = zdiff3


[pager]

	difftool = true


[pretty]

	onefullline = %C(yellow)%h%C(reset) %C(green)%ar%C(reset) %C(bold blue)%an%C(reset) %C(red)%d%C(reset) %s
	custom = %C(bold blue)%h%C(reset) %C(bold green)%ad%C(reset) %C(dim white)%an%C(reset) %C(white)%s%C(reset) %C(bold yellow)%d%C(reset)


[pull]

	#ff = only
	rebase = true


[push]

	# git push will by default push all branches that have the same name on the remote
	# to limit this behavior to just the current branch, set this configuration option:
	default = simple
	#default = matching

	# Instead of manually pushing new tags with --follow-tags, you always send
	# your local tags up along with a git push.
	followTags = false
	autoSetupRemote = true


[rebase]

	autoStash = true
	autoSquash = true
	updateRefs = true


[receive]

	# https://groups.google.com/forum/m/#!msg/binary-transparency/f-BI4o8HZW0/MDmnWideAgAJ
	fsckobjects = true


#[sendemail]
#
#	smtpserver = smtp.gmail.com
#	smtpserverport = 587
#	smtpencryption = tls
#	smtpuser = serge@vanginderachter.be
#	verify = off


[status]

	relativePaths = true
	showUntrackedFiles = all
	submodulesummary = true
	showStash = true


[svn]

	# push empty directory removals back to svn as directory deletes
	rmdir = true


[transfer]

	# https://groups.google.com/forum/m/#!msg/binary-transparency/f-BI4o8HZW0/MDmnWideAgAJ
	fsckobjects = true


[user]

	name = Serge van Ginderachter
    email = serge@ginsys.eu
	signingkey = 3148E9B9232D65E5



## includes

[include]
	path = ~/.gitconfig.d/git-repo

[includeIf "gitdir:~/src/autops/"]
	path = ~/.gitconfig.d/autops

[includeIf "gitdir:~/src/ginsys/"]
	path = ~/.gitconfig.d/ginsys

[includeIf "gitdir:~/src/srgvg/"]
	path = ~/.gitconfig.d/srgvg


[advice]
	addIgnoredFile = false
[diff "dyff"]
	command = "dyff_between() { dyff --color on between --omit-header \"$2\" \"$5\"; }; dyff_between"
[credential "https://github.com"]
	helper =
	helper = !/home/serge/.asdf/installs/github-cli/2.60.1/bin/gh auth git-credential
[credential "https://gist.github.com"]
	helper =
	helper = !/home/serge/.asdf/installs/github-cli/2.60.1/bin/gh auth git-credential
[column]
	ui = auto
[tag]
	sort = version:refname
[help]
	autocorrect = prompt
