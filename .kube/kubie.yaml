---
# Force kubie to use a particular shell, if unset detect shell currently in use.
# Possible values: bash, dash, fish, zsh
# Default: unset
shell: bash

# Configure where to look for kubernetes config files.
configs:

    # Include these globs.
    include:
        - ~/.kube/config-*.yml
        - ~/.kube/config-*.yaml

    # Exclude these globs.
    # Note: kubie's own config file is always excluded.
    exclude:
        - ~/.kube/config
        - ~/.kube/config.yml
        - ~/.kube/config.yaml
        - ~/.kube/kubie.yaml

# Prompt settings.
prompt:
    # Disable kubie's custom prompt inside of a kubie shell. This is useful
    # when you already have a prompt displaying kubernetes information.
    # Default: false
    disable: false

    # When using recursive contexts, show depth when larger than 1.
    # Default: true
    show_depth: true

    # When using zsh, show context and namespace on the right side using RPS1.
    # Default: false
    zsh_use_rps1: false

    # When using fish, show context and namespace on the right-hand side.
    # Default: false
    fish_use_rprompt: false

    # When using xonsh, show context and namespace on the right-hand side.
    # Default: false
    xonsh_use_right_prompt: false

# Behavior
behavior:
    # Make sure the namespace exists with `kubectl get namespaces` when switching
    # namespaces. If you do not have the right to list namespaces, disable this.
    # Default: true
    validate_namespaces: true

    # Enable or disable the printing of the 'CONTEXT => ...' headers when running
    # `kubie exec`.
    # Valid values:
    #   auto:   Prints context headers only if stdout is a TTY. Piping/redirecting
    #           kubie output will auto-disable context headers.
    #   always: Always prints context headers, even if stdout is not a TTY.
    #   never:  Never prints context headers.
    # Default: auto
    print_context_in_exec: auto

# Optional start and stop hooks
hooks:
#    # A command hook to run when a CTX is started.
    start_ctx: >
        rm -f {$(dirname $KUBECONFIG 2>/dev/null || echo -n /tmp),$HOME/.kube}/gke_gcloud_auth_plugin_cache
#    # A command hook to run when a CTX is stopped
    stop_ctx: >
        rm -f {$(dirname $KUBECONFIG 2>/dev/null || echo -n /tmp),$HOME/.kube}/gke_gcloud_auth_plugin_cache
