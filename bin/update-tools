#!/bin/bash

# c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t
# vi: set shiftwidth=4 tabstop=4 noexpandtab:
# :indentSize=4:tabSize=4:noTabs=false:

set -o nounset
set -o pipefail
#set -o errtrace
#set -o errexit

# shellcheck disable=SC1090
source "$HOME/bin/common.bash"

##########################################################################################################
#
#
TMPPATH="$HOMETMPDIR/tmp/update-tools"
BINPATH="$HOME/bin2"
COMPLPATH="$HOME/.local/share/bash-completion/completions"

CURL_COMMAND="curl --silent --connect-timeout 5 --location"
source $HOME/etc/keys/tokens.bash && CURL_COMMAND="$CURL_COMMAND -u $GITHUB_USER:$GITHUB_TOKEN"

OS_ARCH="linux_amd64"
OS_ARCH2="linux-amd64"
OS_ARCH3="Linux_x86_64"
OS_ARCH4="linux_x86_64"
OS_ARCH5="linux64"

trap trap_exit SIGINT SIGHUP SIGQUIT SIGABRT
trap trap_exit EXIT
trap trap_error ERR

rm -rf ${TMPPATH}
mkdir --parents ${TMPPATH}
cd ${TMPPATH}

#
##########################################################################################################
#

trap_exit() {
	title "cleanup"
	cd $HOME
	rm -rfv "$(dirname $TMPPATH)"
	title "end"
}

trap_error(){
	err ${echo_bold_red}"Got error, continuing."
	return 0
}

title() {
	echo -e ${echo_yellow}
	echo "########################################"
	echo -e "# ${*}" ${echo_white}
}

log() {
	echo -en ${echo_yellow}"#"${echo_white}
	echo -e " ${*}"
}

err() {
	echo -e ${echo_bold_red}"\n*** ${*}\n"${echo_white}
}

github_getlatestversion() {
	local project

	local url
	local version
	local json

	project=$1

	url="https://api.github.com/repos/${project}/releases/latest"

	json="$($CURL_COMMAND ${url})"
	version="$(echo ${json} | jq -r .tag_name)"
	if [[ "${version}" =~ "null" ]] || [ -z "${version}" ]
	then
		err failed retrieving latest version for ${project} version ${version} >&2
		err via ${url} >&2
		err "${json}" >&2
		echo -n "${version}"
		return
	fi
	echo -n ${version}
}

download_file() {
	local url
	local destpathname

	local tmppathname
	local destname

	url=$1
	destpathname=$2

	tmppathname="${TMPPATH}/$(basename ${destpathname})"

	$CURL_COMMAND ${url} --output ${tmppathname}
	rc=$?													; set +o pipefail
	header="$(strings ${tmppathname} | head --lines 1)"		; set -o pipefail

	if [ "${rc}" -ne 0 ] || [[ "${header}" =~ "404" ]] || [[ "${header}" =~ "Not Found" ]]
	then
		err failed downloading ${url}
		return
	elif [[ "${url}" =~ tar.gz$ ]] || \
		 [[ "${url}" =~ tgz$    ]] || \
		 [[ "${url}" =~ tar.xz$ ]] || \
		 [[ "${url}" =~ tar.bz$ ]] || \
		 [[ "${url}" =~ tbz$    ]] || \
		 [[ "${url}" =~ zip$    ]]
	then
		mv ${tmppathname} ${tmppathname}.archive  # when no subdir and nameclash
		# libarchive-tools
		bsdtar --extract --file ${tmppathname}.archive
		destname="$(basename ${destpathname})"
		tmppathname="$(find ${TMPPATH} -name ${destname})"
		if [ "${tmppathname}" == "" ]
		then
			err "could not find ${destname}" in archive
			return
		fi
		destpathname="$(dirname ${destpathname})/${destname}"
	fi


	if ! cmp ${tmppathname} ${destpathname} >/dev/null 2>&1
	then
		mv ${tmppathname} ${destpathname}
		if [[ "${destpathname}" =~ "/bin" ]]
		then
			chmod +x ${destpathname}
		fi
		log "Downloaded "
		file ${destpathname}
	else
		log ${tmppathname} already exists at ${destpathname}
	fi
}


github_download() {

	local type
	local project
	local artefact
	local destpath
	local destname
	local version

	local url
	local destpathname

	type=$1
	project=$2
	artefact=$3
	destpath=$4
	destname=$5
	version=${6:-}

	destpathname="${destpath}/${destname}"


	if [ $type = release ]
	then
		echo "consider for mise:   \"ubi:$project\" = { version = \"latest\", exe = \"$destname\" }"
	fi

	title "Fetch   ${project} ${type} ${artefact} to ${destpathname}"
	if [ -z "${version}" ] || [ "${version}" = "latest" ]
	then
		version="$(github_getlatestversion ${project})"
		if [[ "${version}" =~ "null" ]] || [ -z "${version}" ]
		then
			log "No version found, can't download"
			return
		fi
	fi

	if [[ "${artefact}" =~ "@@VERSION@@" ]]
	then
		artefact="$(echo -n ${artefact} | sed s/@@VERSION@@/${version}/g )"
		if [[ "${artefact}" =~ (civo|korb|grpcurl|oras|dyff|nats) ]]
		then
			artefact="$(echo -n ${artefact} | sed s/${version}/${version#v}/ )"
		fi
	fi

	if [ "${type}" = "release" ]
	then
		url="https://github.com/${project}/releases/download/${version}/${artefact}"
	elif [ "${type}" = "file" ]
	then
		url="https://raw.githubusercontent.com/${project}/${version}/${artefact}"
	else
		err "Unknown download type ~${type}~"
		exit
	fi

	log "Fetch  version ${version} to ${destpath}/${destname}"
	log " from  ${url}"
	download_file ${url} ${destpathname}
}

##########################################################################################################
#
##########################################################################################################

get_github() {
	#trap "return 0" ERR
	#trap "return 1" SIGINT SIGHUP SIGQUIT SIGABRT

	# github_download	release|file	project					artefactname_${osarch}					destpath	destname					version
	github_download		file			johanhaleby/kubetail	kubetail								$BINPATH	kubetail					master
	github_download		file			johanhaleby/kubetail	completion/kubetail.bash				$COMPLPATH	completions.kubetail.bash	master
	github_download		release			Orange-OpenSource/hurl	hurl-@@VERSION@@-x86_64-unknown-linux-gnu.tar.gz $COMPLPATH	hurl.bash			latest
	github_download		release			Orange-OpenSource/hurl	hurl-@@VERSION@@-x86_64-unknown-linux-gnu.tar.gz $COMPLPATH	hurlfmt.bash		latest
	github_download		release			gabm/Satty				satty-x86_64-unknown-linux-gnu.tar.gz   $COMPLPATH	satty.bash					latest
	github_download		release			sxyazi/yazi				yazi-x86_64-unknown-linux-gnu.zip		$COMPLPATH  yazi.bash					latest
	github_download		file			vaniacer/kui			kui										$BINPATH	kui							master
}

##########################################################################################################

get_downloads() {

	title "go-chromecast"
	download_file $($CURL_COMMAND https://api.github.com/repos/vishen/go-chromecast/releases/latest \
				| jq -r '.assets[].browser_download_url' \
				| grep $OS_ARCH ) ${BINPATH}/go-chromecast


	title "kubedash"
	download_file "$($CURL_COMMAND https://api.github.com/repos/kdash-rs/kdash/releases/latest \
				| jq -r '.assets[].browser_download_url' \
				| grep 'linux\.tar.gz' )" ${BINPATH}/kdash

	title "broot"
	download_file "https://dystroy.org/broot/download/x86_64-linux/broot" ${BINPATH}/broot
}

##########################################################################################################

get_krew(){

	title "krew"

	log "\nkrew update"
	kubectl-krew update

	log "\nkrew upgrade"
	kubectl-krew upgrade

	if [ "${HOSTNAME}" = "goldorak" ]
	then
		log "\nkrew make lists"
		kubectl-krew index list > $HOME/.config/krew-index-list
		kubectl-krew list > $HOME/.config/krew-list
		# to restore: krew install <  $HOME/.config/krew-list
	fi

	log "\nkrew / kubectl-plugin_completion"
	version="$(github_getlatestversion MartinSimango/kubectl-plugin_completion)"
	mise exec krew@latest -- krew install --manifest-url https://github.com/MartinSimango/kubectl-plugin_completion/releases/download/${version}/plugin_completion.yaml
}

##########################################################################################################

get_asdf() {

	title "asdf update"
	asdf update

	log "asdf plugin update --all"
	asdf plugin update --all
	log ""

	plugins="$(asdf plugin-list)"
	log "asdf updating plugins\n$(echo $plugins | xargs)"
	for plugin in $plugins
	do
		log "asdf install $plugin latest"
		asdf install $plugin latest ||:
		log ""

		if ! [[ "$plugin" =~ python|flux2 ]]
		then
			log "asdf global $plugin latest"
			asdf global $plugin latest ||:
			log ""
		fi
	done
	log "END of asdf updating plugins"

	if [ "${HOSTNAME}" = "goldorak" ]
	then
		log asdf make lists
		asdf plugin-list     > $HOME/.config/asdf-plugin-list
		asdf plugin-list-all > $HOME/.config/asdf-plugin-list-all
	fi

	title "asdf cleaning up old versions"
	for plugin in $(asdf plugin-list | grep -v -e python -e flux2 -e kubectl -e gcloud -e azure-cli -e talosctl)
	do
		for version in $(asdf list $plugin | grep -v '*' | head -n -5)
		do
			log "\nremoving $plugin $version"
			asdf uninstall $plugin $version
		done
	done

	title "asdf install add-ons for asdf tools"
	log "\ngithub cli extensions"
	gh auth login --hostname github.com || gh extension install dlvhdr/gh-dash
	gh extension upgrade dlvhdr/gh-dash
}

##########################################################################################################

get_mise() {

	title "mise-en-place"
	if ! hash mise >/dev/null 2>&1
	then
		title "install mise"
		curl https://mise.run | sh
		if ! cmp $HOME/.local/bin/mise $HOME/bin/mise >/dev/null 2>&1
		then
			mv -v cmp $HOME/.local/bin/mise $HOME/bin/mise
		fi
	else
        # https://github.com/mise-plugins/mise-gcloud/issues/2
        export MISE_FETCH_REMOTE_VERSIONS_TIMEOUT="25s"
		mise self-update --yes --no-plugins
		mise upgrade --yes
	fi

}

##########################################################################################################

get_flatpak() {

	title "flatpak"
	log "flatpak update global"
	flatpak update --assumeyes --noninteractive
	log ""
	log "flatpak update user"
	flatpak update --assumeyes --noninteractive --user
	log ""

	if [ "${HOSTNAME}" = "goldorak" ]
	then
		log "flatpak make lists"
		flatpak remotes --columns=name,url > $TMPPATH/flatpak.remotes \
			&& mv $TMPPATH/flatpak.remotes $HOME/.local/share/flatpak/remotes.ls
		flatpak list --app --columns=application,version,origin,installation > $TMPPATH/flatpak.list \
			&& mv $TMPPATH/flatpak.list    $HOME/.local/share/flatpak/list.ls
		log ""
	fi

}

##########################################################################################################

get_helm() {

	title "helm repo update"
	helm repo update
	if [ "${HOSTNAME}" = "goldorak" ]
	then
		helm repo list > $TMPPATH/helm-repo-list.yaml && mv $TMPPATH/helm-repo-list.yaml $HOME/.config/helm/repo-list.yaml
	fi

}

##########################################################################################################

get_bash_completions() {

	title "generate bash completions"
	$HOME/bin/update-bash-completions.sh

}

##########################################################################################################

get_pipx() {

	title update pipx
	log install new packages from pipx list
	comm -13 <(pipx list --short | sed s/\ .*//) <( < ~/etc/packages/pipx.list sed s/\ .*// ) | xargs --no-run-if-empty -n1 pipx install
	log upgrade all
	pipx upgrade-all
	log save new pipx.list
	pipx list --short > $TMPPATH/pipx.list && mv $TMPPATH/pipx.list $HOME/etc/packages/pipx.list

}

##########################################################################################################

get_misc() {

	title "misc stuff"
	log "civo update"
	hash civo >/dev/null 2>&1 && civo update
	log ""

	log "ble.sh"
	if hash ble-update 2> /dev/null
	then
		ble-update
	else
		echo "# ble.sh not installed. install with:"
		echo "curl -L https://github.com/akinomyoga/ble.sh/releases/download/nightly/ble-nightly.tar.xz | tar xJf -"
		echo " bash ble-nightly/ble.sh --install ~/.local/share"
	fi

	log "atuin"
	if hash atuin 2> /dev/null
	then
		atuin-update
	else
		echo "# atuin not installed. install with:"
		echo "curl --proto '=https' --tlsv1.2 -LsSf https://setup.atuin.sh | sh"
	fi

}

##########################################################################################################
#
##########################################################################################################

main() {

	cd ${HOME}

	get_mise
	get_pipx
	get_krew
	get_helm
	get_flatpak
	get_misc
	get_downloads
	get_github
	get_bash_completions

	title "add dotfiles"
	$HOME/bin/dotfiles add


}

#main
cd $HOME
	#get_downloads
	get_github

##########################################################################################################
