#!/bin/bash

# c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t
# vi: set shiftwidth=4 tabstop=4 noexpandtab:
# :indentSize=4:tabSize=4:noTabs=false:

set -o nounset
set -o errexit
set -o pipefail


# shellcheck disable=SC1090
source "$HOME/bin/common.bash"

I3LOCK_ANNOTATETEXT="${LOCK_ANNOTATETEXT:-}"
I3LOCK_ICONS="${LOCK_ICONS:-$HOME/Pictures/icons/i3lock}"
I3LOCK_ICON="${LOCK_ICON:-$I3LOCK_ICONS/token.png}"

CACHEDIR="$HOME/.cache/$(basename $0)"
[ -d ${CACHEDIR} ] || mkdir -p ${CACHEDIR}

# first parameter is the file to convert
IMAGE=${1:-}
ANNOTATE_LOCK=0
if [ -z "${IMAGE}" ]
then
	errexit "missing image argument or 'lock <image>'"
elif [ "${IMAGE}" = "lock" ]
then
	ANNOTATE_LOCK=1
	shift
	IMAGE=${1:-}
fi

if [ ! -r "${IMAGE}"  ]
then
	errexit "cannot read ${IMAGE}"
fi

# second, optional parameter is the new image filename
IMAGE_NEW=${2:-}
IMAGE="$(realpath --no-symlinks "${IMAGE}")"
IMAGE_PATH="$(dirname "${IMAGE}")"
IMAGE_NAME_BASE="$(basename ${IMAGE})"
IMAGE_NAME_EXTN="${IMAGE_NAME_BASE##*.}"
IMAGE_NAME_BASE="${IMAGE_NAME_BASE%.*}"

if [ ${ANNOTATE_LOCK} -eq 0 ]
then
	notify "Converting single picture ${IMAGE} to multi-display"
else
	notify "Converting single picture ${IMAGE} to multi-display annotated lock image"
fi

if [ -z "${IMAGE_NEW}" ]
then
	IMAGE_NAME="$(basename "${IMAGE}")"
	IMAGE_NAME_BASE="${IMAGE_NAME%.*}"
	IMAGE_NEW="${IMAGE_PATH}/${IMAGE_NAME_BASE}-xrandr.png"
	notify_debug "Target file path is ${IMAGE_NEW}"
else
	# check new image filename extension
	IMAGE_NEW_EXT=${IMAGE_NEW##*.}
	if [ ! "${IMAGE_NEW_EXT}" = "png" ]
	then
		IMAGE_NEW_BASE=${IMAGE_NEW%.*}
		IMAGE_NEW="${IMAGE_NEW_BASE}.png"
		notify_debug "The passed new image filename has extension '${IMAGE_NEW_EXT}'; converting to '${IMAGE_NEW}'"
	fi

	# if new image name has no path, prepending the path from original IMAGE
	if [ "${IMAGE_NEW}" = "$(basename "${IMAGE_NEW}")" ]
	then
		IMAGE_NEW="${IMAGE_PATH}/${IMAGE_NEW}"
	fi

	#canonicalize
	IMAGE_NEW="$(realpath --canonicalize-missing --logical "${IMAGE_NEW}")"
	notify_debug "New generated xrandr image will be located at '${IMAGE_NEW}'"
fi

IMG=${IMAGE}
CONVERT=(time2 convert)
CACHEFILENAME="${IMAGE_NAME_BASE}"
if [ ${ANNOTATE_LOCK} -eq 1 ]
then
	CACHEFILENAMEL="${IMAGE_NAME_BASE}_lock"
else
	CACHEFILENAMEL="${IMAGE_NAME_BASE}"
fi

# hold calculated position for lock symbol and text
LOCK=()
while read -r LINE
do
	if [[ "$LINE" =~ ([0-9]+)\ x\ ([0-9]+) ]]; then
		CANVASW=${BASH_REMATCH[1]}
		CANVASH=${BASH_REMATCH[2]}
		notify_debug "Detected screen canvas ${CANVASW}x${CANVASH}"
		CONVERT+=(-page ${CANVASW}x${CANVASH})
	fi
	if [[ "$LINE" =~ ([0-9]+)x([0-9]+)\+([0-9]+)\+([0-9]+) ]]; then
		W=${BASH_REMATCH[1]}
		H=${BASH_REMATCH[2]}
		X=${BASH_REMATCH[3]}
		Y=${BASH_REMATCH[4]}

		MIDXi=$((W / 2 + X - 60  / 2))
		MIDYi=$((H / 2 + Y - 60  / 2))

		TEXT="${I3LOCK_ANNOTATETEXT}"
		ICON="${I3LOCK_ICON}"
		if [ -n "${TEXT}" ]
		then
			# for some reason "convert -list font" returns 1
			FONT="$( (convert -list font ||:) | awk "{ a[NR] = \$2 } /family: $(fc-match sans -f "%{family}\n")/ { print a[NR-1]; exit }")"

			MIDXt=$((W / 2 + X - 285 / 2))
			MIDYt=$((H / 2 + Y + 320 / 2))
			LOCK+=(-font $FONT -pointsize 26 -fill lightgrey -stroke grey10 \
			   -strokewidth 2 -annotate +$MIDXt+$MIDYt "$TEXT" \
			   -fill lightgrey -stroke lightgrey -strokewidth 1 -annotate +$MIDXt+$MIDYt "$TEXT")
		fi
		LOCK+=($ICON -geometry +$MIDXi+$MIDYi -composite)

		notify_debug "Detected screen at ${W}x${H}+${X}+${Y}"
		CACHEFILENAME="${CACHEFILENAME}_${W}x${H}+${X}+${Y}"
		CACHEFILENAMEL="${CACHEFILENAMEL}_${W}x${H}+${X}+${Y}"
		CONVERT+=('\(' $IMG -resize ${W}x${H}^)
		CONVERT+=(-gravity center -extent ${W}x${H} -repage ${W}x${H}+${X}+${Y} '\)')

		if [ "${IMG}" != "-clone 0" ]
		then
			# first instance should be the image, next use +clone
			IMG="-clone 0"
		fi
	fi
		# sort displays from left to right, from top to bottom
done <<<"$(xrandr | grep -e "current " -e " connected" | sed -e 's/primary //' -e 's/.*current//' | sort -n -b -t+ -k 2 | sort -n -b -t+ -k 3)"
CONVERT+=(-layers merge -transparent white "${IMAGE_NEW}")

CACHEFILE="${CACHEDIR}/${CACHEFILENAME}.${IMAGE_NEW_EXT}"
CACHEFILEL="${CACHEDIR}/${CACHEFILENAMEL}.${IMAGE_NEW_EXT}"

if [ -r "${CACHEFILE}" ]
then
	notify "Using cached file "${CACHEFILE}""
	cp "${CACHEFILE}" "${IMAGE_NEW}"
else
	notify_debug "${CONVERT[@]}"
	eval "${CONVERT[@]}"
	cp "${IMAGE_NEW}" "${CACHEFILE}"
	notify "Created multidisplay file at ${IMAGE_NEW}, cached at ${CACHEFILE}"
fi

if [ ${ANNOTATE_LOCK} -eq 1 ]
then
	if [ -r "${CACHEFILEL}" ]
	then
		notify "Using cached lockscreen file "${CACHEFILEL}""
		cp "${CACHEFILEL}" "${IMAGE_NEW}"
	else
		notify "Annotate lockscreen with lock symbol and optional text"
		time2 convert "${IMAGE_NEW}" "${LOCK[@]}" "${IMAGE_NEW}"
		cp "${IMAGE_NEW}" "${CACHEFILEL}"
		notify "Created multidisplay lockscreen file at ${IMAGE_NEW}, cached at ${CACHEFILEL}"
	fi
fi
