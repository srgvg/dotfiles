#!/bin/bash
# c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t
# vi: set shiftwidth=4 tabstop=4 noexpandtab:
# :indentSize=4:tabSize=4:noTabs=false:


# # i3lock on commputer sleep
#   Source: https://bbs.archlinux.org/viewtopic.php?pid=1170536#p1170536 by 65kid
#   Also: https://wiki.debian.org/ScreenLockingOnSleep
#

set -o nounset
set -o errexit
set -o pipefail

# always log
# shellcheck disable=SC2034
[ -z "${SYSTEMDSERVICE:-}" ] && [ "${DEBUG:-0}" -eq 0 ] &&
	FORCE_DEBUG_LOGGING="TRUE"
DEBUG=2
set -x

# shellcheck disable=SC1090
source "$HOME/bin/common.bash"

LOCK_SCREEN_IMAGE="${LOCK_SCREEN_IMAGE:-$HOME/.lockscreen.png}"
LOCKSCREEN="${1:-${LOCK_DEFAULT_LOCKSCREEN}}"
LOCKSLEEP=5

# SYSTEMDSERVICE is set to yes in the systemd service unit file
SYSTEMDSERVICE=${SYSTEMDSERVICE:-no}
#MYUID="$(id -u "${USER}")"
MYUID="1000"
if [[ -n "${SWAYSOCK:-}" ]] && [[ "${SWAYSOCK}" =~ 'sway' ]]
then
	PIDPATH=/run/user/${MYUID:-1000}/swaylock
elif [[ -n "${I3SOCK:-}" ]] && [[ "${I3SOCK}" =~ 'i3' ]]
then
	PIDPATH=/run/user/${MYUID:-1000}/i3lock
#else
#	notify_error "no i3 nor sway detected"
fi
PIDFILE=${PIDPATH}/pid
install -g serge -o serge -m 700 -d "${PIDPATH}"


##############################
## subroutines              ##
##############################


function systemdservice() {
	if [ "${SYSTEMDSERVICE}" = yes ]
	then
		return 0
	else
		return 1
	fi
}

function prepare() {
	if ! systemdservice
	then # these checks don't work when ran via systemd (needs dbus)
		notify "Check music players and sound volume"
		PLAYERCTLSTATUS="$(playerctl status ||:)"
		i3-volume is-muted && MUTED=yes || MUTED=no || :
	else
		PLAYERCTLSTATUS="unknown"
		MUTED="unknown"
	fi

	notify "Pick the right lockscreen image"
	if [ ! "$LOCKSCREEN" = "keep" ] && [ ! "$LOCKSCREEN" = "blurred" ]
	then
		notify "Choosing a picture background"
		LOCKSCREEN_SRC="$(setbg lock "$LOCKSCREEN")"
		xrandr-background lock "${LOCKSCREEN_SRC}" "${LOCK_SCREEN_IMAGE}"
	elif [ "$LOCKSCREEN" = "blurred" ]
	then
		make_blurred
	else
		notify "Keeping the current lockscreen"
		return
	fi

}

function make_blurred() {
	# take a screenshot and blur it for the lock screen
	notify "Take a screenshot and blur it"
	BLUR="-blur 0x5"

	# take screenshot
	time2 maim --format=png --hidecursor --quality 7 --quiet "${LOCK_SCREENSHOT_IMAGE}"

	# blur screenshot
	time2 convert "${LOCK_SCREENSHOT_IMAGE}" ${BLUR} "${LOCK_SCREEN_IMAGE}"
}

function pre_lock() {
	if ! systemdservice
	then
		if [ "${MUTED}" = "no" ]
		then
			notify "Mute sound"
			i3-volume mute >/dev/null || notify "Could not mute the sound" >&2
		fi
		if [ "${PLAYERCTLSTATUS}" = "Playing" ]
		then
			notify "Stop any music player"
			playerctl stop || notify "Could not stop the music player" >&2
		fi
	fi

	notify "Disable presentation mode"
	presentation-mode stop

    # sleep because seems too soon after pres mode stop
	(
		sleep 1
		notify "Pause notifications"
		notify "$(killall -v -SIGUSR1 dunst 2>&1)"
	 ) &

	notify "Lock remote irssi screen"
	(irc lock ||:) & sleep 1
}

function perform_lock() {
	# start the real lock command in the background, set the PID file,
	# then wait for the lock to end (when unlocked)
	if ifdebug3
	then
		notify "Now is when we would run i3lock, sleeping for ${LOCKSLEEP}s"
		time2 sleep ${LOCKSLEEP} &
	else
		if [[ -n "${I3SOCK:-}" ]] && [[ "${I3SOCK}" =~ 'i3' ]]
		then
			notify "Running i3lock"
			time2 i3lock --show-failed-attempts --tiling --nofork --ignore-empty-password --image "${LOCK_SCREEN_IMAGE}" \
				|| notify_error "i3lock exited with exit code $?" &
		elif [[ -n "${SWAYSOCK:-}" ]] && [[ "${SWAYSOCK}" =~ 'sway' ]]
		then
			notify "Running swaylock"
			time2 swaylock --show-failed-attempts --tiling --ignore-empty-password --image "${LOCK_SCREEN_IMAGE}" \
				|| notify_error "swaylock exited with exit code $?" &
		else
			notify_error "no i3 nor sway detected"
		fi
	fi

	# get and set i3lock pid
	local PID=$!
	setpid $PID

	# give i3lock a bit of time to display the image
	sleep 1

	## /etc/systemd/system/i3lock.service
	#
	# [Unit]
	# Description=i3lock
	# Before=sleep.target
	#
	# [Service]
	# User=serge
	# Type=notify
	# NotifyAccess=all
	# Environment=DISPLAY=:0.0
	# ExecStart=/home/serge/bin/lock
	# PIDFile=run/user/1000/i3lock/pid
	# Environment=SYSTEMDSERVICE=yes
	#
	# [Install]
	# WantedBy=sleep.target
	#
	if systemdservice
	then
		systemd-notify --ready --status="Screen locked with image $LOCKSCREEN" &>/dev/null
		notify "Notifying systemd the lock is done"
	fi

	wait $PID
}

function post_lock() {

	notify "Unlock remote irssi screen"
	#(irc unlock ||:) &  # too many issues with ssh timeouts
	irc unlock ||:

    notify "Re-enable notifications"
	notify "$(killall -v -SIGUSR2 dunst 2>&1)"
    systemctl restart --user dunst.service

	if ! systemdservice
	then
		# re-renable music if it was playing
		#if [ "${PLAYERCTLSTATUS}" = "Playing" ]
		#then
		#	notify "Restart music player"
		#	playerctl play || notify "Could not start the music player" >&2
		#fi
		if [ "${MUTED}" = "no" ]
		then
			notify "Unmute the sounds again"
			i3-volume unmute >/dev/null || notify "Could not unmute the sound" >&2
		fi
	fi

	delpid
}

function setpid() {
	PID=${1:-$$}
	mkdir -p ${PIDPATH}
	echo $PID >"${PIDFILE}"
	notify "Lock process started with pid $PID, set in ${PIDFILE}"
}

function delpid() {
	notify "Removing PID file ${PIDFILE}"
	rm -f "${PIDFILE}"
}

function main() {
	# prepare lock screen image
	prepare

	# prepare system before locking
	pre_lock

    # lock screen with a lock screen image picture
	perform_lock

	# post lock to be run after screen is unlocked
	post_lock
	}

notify "Lock service started"
main

