#!/bin/bash

# c-basic-offset: 4; tab-width: 4; indent-tabs-mode: t
# vi: set shiftwidth=4 tabstop=4 noexpandtab:
# :indentSize=4:tabSize=4:noTabs=false:

set -o nounset
set -o errexit
set -o pipefail


# shellcheck disable=SC1090
source "$HOME/bin/common.bash"

WEECHAT_FILEAWAY='/home/serge/.weechat/fileaway.available'

# make sure the irssi specific control master ends, so mqtt-irssi disconnects
on_exit() {
	if [ ${IRC_EXIT:=$?} -gt 0 ]
	then
		notify_error_desktop "ssh-tmux-weechat exited with error ${IRC_EXIT}"
		dunstify --urgency=critical --icon=dialog-info --app-name=ssh-tmux-weechat "IRC Error" "exited with error ${IRC_EXIT}"
	fi
    # stop the control master
    ssh ${IRC_HOST} -O exit
}

ifdebug1 && SSHDEBUG="-v" || SSHDEBUG=""
action="${1:-}"
if [ "${action}" = "lock" ]
then
	notify_debug "got lock signal, removing $WEECHAT_FILEAWAY"
    # only lock existing open connections, so check if the CM socket is
    # available - master process can still be running, but ssh can timeout
	# b/c no network - so we do an extra check with low timeout to avoid this
	# script waiting for the whole big timeout when locking when no network
	# (which happens when closing the lid)
    ssh ${SSHDEBUG} ${IRC_HOST} -O check >/dev/null 2>&1 \
		&& ssh ${SSHDEBUG} ${IRC_HOST} -o ConnectTimeout=1 "rm -fv $WEECHAT_FILEAWAY"
elif [ "${action}" = "unlock" ]
then
	notify_debug "got unlock signal, creating $WEECHAT_FILEAWAY"
	# same same
	ssh ${SSHDEBUG} ${IRC_HOST} -O check &>/dev/null \
		&& ssh ${SSHDEBUG} ${IRC_HOST} -o ConnectTimeout=1 "touch $WEECHAT_FILEAWAY"
else # start the app over ssh
	notify_debug "Set up a trap for exit"
    trap on_exit INT TERM EXIT
	notify_debug "ssh ${SSHDEBUG} ${IRC_HOST} -o ConnectTimeout=1 'touch $WEECHAT_FILEAWAY'"
	ssh ${SSHDEBUG} ${IRC_HOST} -o ConnectTimeout=1 "touch $WEECHAT_FILEAWAY"
    notify_debug "ssh ${SSHDEBUG} ${IRC_HOST} -t 'tmux new-session -A -s irc weechat'"
    ssh ${SSHDEBUG} ${IRC_HOST} -t 'tmux new-session -A -s irc weechat'
	IRC_EXIT=$?
fi

